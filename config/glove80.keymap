/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>

/* Include all behaviour includes needed by system behaviors/macros */
/* Include behaviour includes needed by key binds - automatically generated */

#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    /* Glove80 system behavior & macros */

    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };
        cpy_pst: cpy_pst {
            compatible = "zmk,behavior-tap-dance";
            label = "CPY_PST";
            #binding-cells = <0>;
            bindings = <&kp LG(C)>, <&kp LG(V)>;

            tapping-term-ms = <125>;
        };
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 58 59 60 61 75 76 77 62 78 79 63 55 56 57 74 73 72 69 52 70 53 54 71>;
            hold-trigger-on-release;
            require-prior-idle-ms = <125>;
        };
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71 2 3 4 55 72 73 74 56 57>;
            require-prior-idle-ms = <125>;
        };
        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };
        mm: mm {
            compatible = "zmk,behavior-tap-dance";
            label = "MM";
            #binding-cells = <0>;
            bindings = <&ht LG(MINUS) MINUS>, <&kp LS(MINUS)>;
        };
        me: me {
            compatible = "zmk,behavior-tap-dance";
            label = "ME";
            #binding-cells = <0>;
            bindings = <&ht LG(EQUAL) EQUAL>, <&kp LS(EQUAL)>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };
        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };
        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };
        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };

    /* Custom Defined Behaviors */
    /* Automatically generated keymap */

    combos {
        compatible = "zmk,combos";

        sleep {
            bindings = <&kp LA(LG(C_EJECT))>;
            key-positions = <0 9>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&kp F1                  &kp F2                    &kp F3             &kp F4        &kp F5                                                                                                                                                                                  &kp F6              &kp F7               &kp F8                   &kp F9                    &kp F10
&kp ESC                 &mt EXCLAMATION NUMBER_1  &mt AT_SIGN N2     &mt HASH N3   &mt DOLLAR N4        &mt PERCENT N5                                                                                                                        &mt CARET N6                 &mt AMPS N7         &mt ASTRK N8         &mt LEFT_PARENTHESIS N9  &mt RIGHT_PARENTHESIS N0  &mt LS(LEFT_BRACKET) LEFT_BRACKET
&kp TAB                 &kp Q                     &kp W              &kp F         &kp P                &kp B                                                                                                                                 &kp J                        &kp L               &kp U                &kp Y                    &mt COLON SEMI            &mt LS(RIGHT_BRACKET) RIGHT_BRACKET
&kp DEL                 &hml LCTRL A              &hml LEFT_ALT R    &hml LCMD S   &hml LSHIFT T        &hml LS(LC(LG(LEFT_ALT))) G                                                                                                           &hmr LG(LC(LS(LEFT_ALT))) M  &hmr RIGHT_SHIFT N  &hmr LEFT_COMMAND E  &hmr LEFT_ALT I          &hmr LCTRL O              &kp BSPC
&mt LEFT_SHIFT PAGE_UP  &kp Z                     &kp X              &kp C         &kp D                &kp V                        &cpy_pst  &kp LS(LG(C))  &caps_word        &kp LG(LS(LEFT_BRACKET))  &kp LS(LG(RIGHT_BRACKET))  &kp F12  &kp K                        &kp H               &mt LS(COMMA) COMMA  &mt LS(PERIOD) PERIOD    &mt LS(SLASH) SLASH       &mt LS(BACKSLASH) BACKSLASH
&magic 2 0              &kp LG(LEFT_ARROW)        &kp C_VOLUME_DOWN  &kp C_VOL_UP  &kp LG(RIGHT_ARROW)                               &mm       &kp SPACE      &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES         &kp RET                    &me                                   &kp LEFT            &kp DOWN             &kp UP                   &kp RIGHT                 &mt TILDE GRAVE
            >;
        };

        layer_Lower {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                                       &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &none            &kp PAUSE_BREAK
&trans        &none         &none       &none       &none     &none                                                         &kp LEFT_PARENTHESIS   &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
&kp ASTERISK  &kp MINUS     &kp N7      &kp N8      &kp N9    &kp LS(PLUS)                                                  &kp RIGHT_PARENTHESIS  &kp KP_N7   &kp KP_N8     &kp KP_N9     &kp KP_MINUS     &kp SCROLLLOCK
&kp SLASH     &kp BSPC      &kp N4      &kp N5      &kp N6    &kp RET                                                       &kp PERCENT            &kp KP_N4   &kp KP_N5     &kp KP_N6     &kp KP_PLUS      &none
&kp EQUAL     &kp N0        &kp N1      &kp N2      &kp N3    &kp PERIOD    &trans  &trans  &to 0   &trans  &trans  &trans  &kp COMMA              &kp KP_N1   &kp KP_N2     &kp KP_N3     &kp KP_ENTER     &trans
&magic 2 0    &none         &none       &none       &none                   &trans  &trans  &trans  &trans  &trans  &trans                         &kp KP_N0   &kp KP_N0     &kp KP_DOT    &kp KP_ENTER     &trans
            >;
        };

        layer_Magic {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&trans       &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };
    };
};
